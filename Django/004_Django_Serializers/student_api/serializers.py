from rest_framework import serializers
from .models import Student

#! Bunlar ilkel methodğŸ‘‡

# class StudentSerializer(serializers.Serializer):

#     first_name = serializers.CharField(max_length=50)
#     last_name = serializers.CharField(max_length=50)
#     number = serializers.IntegerField()
#     age = serializers.IntegerField()

# #? Bu yukarÄ±daki serializers Ä± yazarsam asagÄ±daki iki methodu yazmak zorundayÄ±m ğŸ‘‡


# def create(self, validated_data):
#         return Student.objects.create(**validated_data)


# def update(self, instance, validated_data):
#         instance.first_name = validated_data.get('first_name', instance.first_name)
#         instance.last_name = validated_data.get('last_name', instance.last_name)
#         instance.number = validated_data.get('number', instance.number)
#         instance.age = validated_data.get('age', instance.age)
#         instance.save()
#         return instance

#         #! ilkel method buraya kadarğŸ‘†
#     #*âœ¨âœ¨2.adÄ±m artÄ±k serializers Ä±m hazÄ±r ben artÄ±k view.py e gidip serializers Ä±mÄ± import edebilirim.


#? https://www.django-rest-framework.org/api-guide/serializers/#modelserializer 
# kullanÄ±lan seriliazers methoduğŸ‘‡

# class StudentSerializer(serializers.ModelSerializer):

#     class Meta:
#         model = Student
        # fields = ["id","first_name","last_name","number","age"] #!ğŸ‘‰bunlar benim modelimden gelen fieldlar.
        # exclude = ["number"]
        #! datalarÄ±mdan number harÄ±cÄ±ndekileri getirecek exclude harÄ±c demek.Bunu calÄ±stÄ±rÄ±rken fieldsÄ± kapÄ±yoruz

#! class StudentSerializer(serializers.ModelSerializer):
#!     class Meta:
#!         model = Student
# !        fields = "__all__"
#! Bu sekilde yukarÄ±daki ilkel method ile yaptÄ±gÄ±mÄ±z seyi kÄ±saca yapabiliyoruz.
#? eger verimin hepsinin dÃ¶nmesni istemeseydim  fields = ["id","first_name","last_name","number","age"] ÅŸeklinde belirterek response olarak dÃ¶ndÃ¼recektim.


#*ğŸ‘‡ database den cektiÄŸim student datasÄ±na bu seriliazares a ekstra data ekleyip frontend de dÃ¶nebiliyoerum asagÄ±dada onu yaptÄ±k.
class StudentSerializer(serializers.ModelSerializer):
   
   born_year= serializers.SerializerMethodField()
   path = serializers.StringRelatedField()
#    ğŸ‘†path seklinde gÃ¶rmek iÃ§in bunu bu sekilde tanÄ±mladÄ±k




class Meta:
 


        model = Student
        fields = ["id","first_name","last_name","number","age","born_year","path"]
        # Buraya ben hangi methodlarÄ± verirsem onlarÄ± bana dÃ¶ndÃ¼rÃ¼yor.ğŸ‘†

        def get_born_year(self,obj):
            import datetime
            current_time = datetime.datetime.now()
            return current_time.year - obj.age

class PathSerializer(serializers.ModelSerializer):
    
    students = StudentSerializer(many=True)
    students = serializers.HyperlinkedRelatedField(
        many=True,
        read_only=True,
        view_name='detail'
    )
    
    class Meta:
        model = Path
        # fields = "__all__"
        fields = ["id", "path_name", "students"]